apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: taint-node-on-ontap-san-condition
spec:
  rules:
  - name: add-taint-on-ontap-san-condition
    match:
      resources:
        kinds:
        - Node
    preconditions:
      all:
      - key: "{{ request.object.spec.status.conditions[?(@.type=='OntapSANProblem')].status || 'False' }}"
        operator: Equals
        value: "True"
    mutate:
      patchStrategicMerge:
        spec:
          taints:
            - key: "OntapSANProblem"
              value: "true"
              effect: "NoExecute"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: taint-node-on-bond0-condition
spec:
  rules:
  - name: add-taint-on-bond0-condition
    match:
      resources:
        kinds:
        - Node
    preconditions:
      all:
      - key: "{{ request.object.spec.status.conditions[?(@.type=='Bond0Problem')].status || 'False' }}"
        operator: Equals
        value: "True"
    mutate:
      patchStrategicMerge:
        spec:
          taints:
            - key: "Bond0Problem"
              value: "true"
              effect: "NoExecute"              
---
apiVersion: policies.kyverno.io/v1alpha1
kind: MutatingPolicy
metadata:
  name: tolerate-ontap-san-problem-if-not-using-ontap-san-storage-class
spec:
  matchConstraints:
    resourceRules:
    - apiGroups: [ "" ]
      apiVersions: [ "v1" ]
      operations: ["CREATE", "UPDATE"]
      resources: [ "pods" ]
  failurePolicy: Fail
  reinvocationPolicy: Ignore      
  evaluation:
    admission:
      enabled: true
  matchConditions:
    - name: does-not-have-volumes-with-ontap-san-storage-class
      expression: "object.spec.volumes.filter(volume, has(volume.persistentVolumeClaim)).map(volume, resource.Get('v1', 'persistentvolumeclaims', object.metadata.namespace, volume.persistentVolumeClaim.claimName)).filter(pvc, pvc.spec.storageClassName == 'ontap-san').length == 0"
  mutations:    
  - patchType: ApplyConfiguration
    applyConfiguration:
      expression: |
        object.spec.tolerations = object.spec.tolerations ? object.spec.tolerations : []
        object.spec.tolerations.push({
          key: "OntapSANProblem",
          value: "true",
          effect: "NoExecute"
        })
---
apiVersion: policies.kyverno.io/v1alpha1
kind: MutatingPolicy
metadata:
  name: tolerate-bond0-problem-if-not-using-nads-starting-with-vlan
spec:
  matchConstraints:
    resourceRules:
    - apiGroups: [ "" ]
      apiVersions: [ "v1" ]
      operations: ["CREATE", "UPDATE"]
      resources: [ "pods" ]
  failurePolicy: Fail
  reinvocationPolicy: Ignore      
  evaluation:
    admission:
      enabled: true
  matchConditions:
    - name: does-not-have-networks-whose-name-starts-with-vlan
      expression: "object.metadata.annotations['k8s.v1.cni.cncf.io/networks'].filter(net, net.name.startsWith('vlan-')).length == 0"
  mutations:    
  - patchType: ApplyConfiguration
    applyConfiguration:
      expression: |
        object.spec.tolerations = object.spec.tolerations ? object.spec.tolerations : []
        object.spec.tolerations.push({
          key: "Bond0Problem",
          value: "true",
          effect: "NoExecute"
        })            